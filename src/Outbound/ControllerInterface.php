<?php

declare(strict_types=1);

namespace RTCKit\Eqivo\Outbound;

use RTCKit\Eqivo\{
    App,
    Session
};
use RTCKit\Eqivo\Exception\{
    HangupException,
    RestXmlFormatException,
    RestXmlSyntaxException
};

use React\Promise\PromiseInterface;
use RTCKit\ESL;
use RTCKit\React\ESL\RemoteOutboundClient;
use stdClass as Event;

interface ControllerInterface
{
    public function setApp(App $app): static;

    public function onConnect(RemoteOutboundClient $client, ESL\Response\CommandReply $response): void;

    /**
     * Fetches then executes remote RestXML
     *
     * @param Session $session
     * @param string $url
     * @param string $method
     * @param array<string, mixed> $params
     *
     * @throws HangupException
     *
     * @return PromiseInterface
     */
    public function fetchAndExecuteRestXml(Session $session, string $url, string $method = 'POST', array $params = []): PromiseInterface;

    /**
     * Fetches remote RestXML
     *
     * @param Session $session
     * @param string $url
     * @param string $method
     * @param array<string, mixed> $params
     *
     * @throws RestXmlFormatException
     * @throws RestXmlSyntaxException
     *
     * @return PromiseInterface
     */
    public function fetchRestXml(Session $session, string $url, string $method = 'POST', array $params = []): PromiseInterface;

    public function executeRestXml(Session $session): PromiseInterface;

    public function loopXmlResponse(Session $session): PromiseInterface;

    public function executeXmlElement(Session $session, RestXmlElement $element): PromiseInterface;

    /**
     * Fires a HTTP callback (generated by a Session event)
     *
     * @param Session $session
     * @param string $url
     * @param string $method
     * @param array<string, mixed> $params
     *
     * @return PromiseInterface
     */
    public function fireCallback(Session $session, string $url, string $method = 'POST', array $params = []): PromiseInterface;

    public function onEvent(Session $session, Event $event): void;

    public function waitForEvent(Session $session, int $timeout = 3600, bool $raiseExceptionOnHangup = false): PromiseInterface;

    public function pushToEventQueue(Session $session, ?Event $event = null): void;

    /**
     * Builds a playback array (to be concatenated for file_string://)
     *
     * @param Session $session
     * @param RestXmlElement $restXml
     * @param list<string> $elements
     *
     * @return list<string>
     */
    public function buildPlaybackArray(Session $session, RestXmlElement $restXml, array $elements): array;

    public function getVariable(Session $session, string $variable): PromiseInterface;
}
