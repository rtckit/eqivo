<?php

declare(strict_types=1);

namespace RTCKit\Eqivo\Inbound;

use RTCKit\Eqivo\{
    App,
    CallRequest,
    Conference,
    Core,
    HangupCauseEnum,
    Session
};

use React\Promise\PromiseInterface;
use stdClass as Event;

interface ControllerInterface
{
    public function setApp(App $app): Controller;

    public function onEvent(Core $core, Event $event): void;

    public function subscribe(Core $core): PromiseInterface;

    /**
     * Fires a HTTP callback (generated by a Session event)
     *
     * @param Session $session
     * @param string $url
     * @param string $method
     * @param array<string, mixed> $params
     *
     * @return PromiseInterface
     */
    public function fireSessionCallback(Session $session, string $url, string $method = 'POST', array $params = []): PromiseInterface;

    /**
     * Fires a HTTP callback (generated by a Conference event)
     *
     * @param Conference $conference
     * @param string $url
     * @param string $method
     * @param array<string, mixed> $params
     *
     * @return PromiseInterface
     */
    public function fireConferenceCallback(Conference $conference, string $url, string $method = 'POST', array $params = []): PromiseInterface;

    /**
     * Fires a HTTP callback (generated by a raw event)
     *
     * @param Event $event
     * @param string $url
     * @param string $method
     * @param array<string, mixed> $params
     *
     * @return PromiseInterface
     */
    public function fireEventCallback(Event $event, string $url, string $method = 'POST', array $params = []): PromiseInterface;

    public function hangupCompleted(Event $event, HangupCauseEnum $reason, ?string $url = null, ?CallRequest $callRequest = null, ?Session $session = null): void;
}
